# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.

name: Auto PR to Release Branch

on:
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to process'
        required: true
        default: ''

jobs:
  create-pr:
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get PR details from event or input
        id: get_pr_details
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            PR_NUMBER=${{ github.event.inputs.pr_number }}
            PR_DATA=$(gh pr view $PR_NUMBER --json number,headRefName,baseRefName,mergeCommit,author,headRepository,milestone --jq '{number: .number, headRefName: .headRefName, baseRefName: .baseRefName, mergeCommit: .mergeCommit.oid, author: .author.login, milestone: .milestone.title}')
            echo "PR_ID=$(echo $PR_DATA | jq -r '.number')" >> $GITHUB_ENV
            echo "PR_AUTHOR=$(echo $PR_DATA | jq -r '.author')" >> $GITHUB_ENV
            echo "MILESTONE=$(echo $PR_DATA | jq -r '.milestone')" >> $GITHUB_ENV
            echo "BASE_BRANCH=$(echo $PR_DATA | jq -r '.baseRefName')" >> $GITHUB_ENV
            echo "HEAD_BRANCH=$(echo $PR_DATA | jq -r '.headRefName')" >> $GITHUB_ENV
            echo "MERGE_COMMIT_SHA=$(echo $PR_DATA | jq -r '.mergeCommit')" >> $GITHUB_ENV
          else
            echo "PR_ID=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "PR_AUTHOR=${{ github.event.pull_request.user.login }}" >> $GITHUB_ENV
            echo "MILESTONE=${{ github.event.pull_request.milestone.title }}" >> $GITHUB_ENV
            echo "BASE_BRANCH=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
            echo "HEAD_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
            echo "MERGE_COMMIT_SHA=${{ github.event.pull_request.merge_commit_sha }}" >> $GITHUB_ENV

      - name: Check for milestone and if release branch exists
        id: check_release_branch
        run: |
          if [ -z "${{ env.MILESTONE }}" ]; then
            echo "No milestone set. Exiting."
            exit 0
          fi

          RELEASE_BRANCH="release-${{ env.MILESTONE }}"

          # Check if the release branch exists
          if git ls-remote --heads origin $RELEASE_BRANCH | grep -q "refs/heads/$RELEASE_BRANCH"; then
            echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV
          else
            echo "Release branch $RELEASE_BRANCH does not exist. Exiting."
            exit 0
          fi

      - name: Create and push the new branch for the PR
        run: |
          PR_TITLE="🍒 Merge changes from PR #${{ env.PR_ID }} to ${{ env.RELEASE_BRANCH }}"
          PR_BODY="Automated PR to merge changes from develop to ${{ env.RELEASE_BRANCH }}"

          # Configure git
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Fetch and checkout the release branch
          git fetch origin
          git checkout ${{ env.RELEASE_BRANCH }}

          # Create a new branch for the PR
          NEW_BRANCH="auto-pr-${{ env.RELEASE_BRANCH }}-${{ env.PR_ID }}"
          git checkout -b $NEW_BRANCH

          # Get the commit range
          BASE_COMMIT=$(git merge-base origin/${{ env.BASE_BRANCH }} origin/${{ env.HEAD_BRANCH }})
          echo "Base commit: $BASE_COMMIT"
          COMMIT_RANGE="${BASE_COMMIT}..${{ env.MERGE_COMMIT_SHA }}"
          echo "Commit range: $COMMIT_RANGE"

          # Attempt to cherry-pick the commits from the original PR
          git cherry-pick $COMMIT_RANGE || {
            # If cherry-pick fails, create a placeholder commit
            echo "Cherry-pick failed. Creating placeholder commit."
            git reset --hard
            echo "" >> CHANGELOG.md
            git add CHANGELOG.md
            git commit -m "Placeholder commit for PR #${{ env.PR_ID }}"

            # Add manual cherry-pick commands to the PR body
            PR_BODY="${PR_BODY}\n\nManual cherry-pick commands:\n"
            PR_BODY="${PR_BODY}\`\`\`\n"
            PR_BODY="${PR_BODY}git fetch origin pull/${{ env.PR_ID }}/head:pr-${{ env.PR_ID }}-branch\n"
            PR_BODY="${PR_BODY}git checkout $NEW_BRANCH\n"
            PR_BODY="${PR_BODY}git cherry-pick $COMMIT_RANGE\n"
            PR_BODY="${PR_BODY}\`\`\`"
          }

          # Push the new branch
          git push origin $NEW_BRANCH

          # Create a pull request and assign the original PR author as the reviewer
          gh pr create --title "$PR_TITLE" --body "$PR_BODY" --head $NEW_BRANCH --base ${{ env.RELEASE_BRANCH }} --reviewer ${{ env.PR_AUTHOR }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
