# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.

name: Auto PR to Release Branch

on:
  pull_request:
    types: [closed]

jobs:
  create-pr:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get PR details from event
        id: get_pr_details
        run: |
          echo "PR_ID=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "PR_AUTHOR=${{ github.event.pull_request.user.login }}" >> $GITHUB_ENV
          echo "MILESTONE=${{ github.event.pull_request.milestone.title }}" >> $GITHUB_ENV

      - name: Check for milestone and if release branch exists
        id: check_release_branch
        run: |
          if [ -z "${{ env.MILESTONE }}" ]; then
            echo "No milestone set. Exiting."
            exit 0
          fi

          RELEASE_BRANCH="release-${{ env.MILESTONE }}"

          # Check if the release branch exists
          if git ls-remote --heads origin $RELEASE_BRANCH | grep -q $RELEASE_BRANCH; then
            echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV
          else
            echo "Release branch $RELEASE_BRANCH does not exist. Exiting."
            exit 0
          fi

      - name: Create and push the new branch for the PR
        run: |
          PR_TITLE="üçí Merge changes from PR #${{ env.PR_ID }} to ${{ env.RELEASE_BRANCH }}"

          # Configure git
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Checkout the merged commit of the triggering PR
          git checkout ${{ github.event.pull_request.merge_commit_sha }}

          # Create and push the new branch for the PR
          git checkout -b auto-pr-${{ env.RELEASE_BRANCH }}
          git merge develop
          git push origin auto-pr-${{ env.RELEASE_BRANCH }}

          # Create a pull request and assign the original PR author as the reviewer
          gh pr create --title "$PR_TITLE" --body "Automated PR to merge changes from develop to ${{ env.RELEASE_BRANCH }}" --head auto-pr-${{ env.RELEASE_BRANCH }} --base ${{ env.RELEASE_BRANCH }} --reviewer ${{ env.PR_AUTHOR }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
