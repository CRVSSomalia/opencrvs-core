type Query {
  listNotifications(
    locationIds: [String]
    status: String
    userId: String
    from: Date
    to: Date
  ): [Notification]
  fetchBirthRegistration(id: ID!): BirthRegistration
  queryRegistrationByIdentifier(identifier: ID!): BirthRegistration
  queryPersonByIdentifier(identifier: ID!): Person
  listBirthRegistrations(
    locationIds: [String]
    status: String
    userId: String
    from: Date
    to: Date
    count: Int
    skip: Int
  ): BirthRegResultSet
  fetchDeathRegistration(id: ID!): DeathRegistration
  listDeathRegistrations(
    locationIds: [String]
    status: String
    userId: String
    from: Date
    to: Date
    count: Int
    skip: Int
  ): DeathRegResultSet
  fetchEventRegistration(id: ID!): EventRegistration
  listEventRegistrations(
    locationIds: [String]
    status: String
    from: Date
    to: Date
    count: Int
    skip: Int
  ): EventRegResultSet
  countEventRegistrations(locationIds: [String]): RegistrationCount
  fetchRegistration(id: ID!): EventRegistration
  locationsByParent(parentId: String, type: String): [Location]
  locationById(locationId: String): Location
  getUser(userId: String): User
  searchUsers(
    username: String
    mobile: String
    status: String
    role: String
    primaryOfficeId: String
    locationId: String
    count: Int
    skip: Int
    sort: String
  ): SearchUserResult
  fetchBirthRegistrationMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String!
  ): BirthRegistrationMetrics
  countEvents(locationIds: [String]): EventCount
  searchEvents(
    status: String
    userId: String
    locationIds: [String]
    status: String
    trackingId: String
    registrationNumber: String
    contactNumber: String
    count: Int
    skip: Int
    sort: String
  ): EventSearchResultSet
  getRoles(
    title: String
    value: String
    type: String
    active: Boolean
    sortBy: String
    sortOrder: String
  ): [Role]
}

type Mutation {
  createNotification(details: NotificationInput!): Notification!
  voidNotification(id: ID!): Notification
  createBirthRegistration(details: BirthRegistrationInput!): CreatedIds!
  updateBirthRegistration(id: ID!, details: BirthRegistrationInput!): ID!
  markBirthAsVerified(
    id: ID!
    details: BirthRegistrationInput
  ): BirthRegistration
  markBirthAsRegistered(id: ID!, details: BirthRegistrationInput): ID!
  markBirthAsCertified(id: ID!, details: BirthRegistrationInput!): ID!
  markEventAsVoided(id: String!, reason: String!, comment: String): ID!
  notADuplicate(id: String!, duplicateId: String!): ID!
  createDeathRegistration(details: DeathRegistrationInput!): ID!
  updateDeathRegistration(id: ID!, details: DeathRegistrationInput!): ID!
  markDeathAsVerified(
    id: ID!
    details: DeathRegistrationInput
  ): DeathRegistration
  markDeathAsRegistered(id: ID!, details: DeathRegistrationInput): ID!
  markDeathAsCertified(id: ID!, details: DeathRegistrationInput!): ID!
  createUser(user: UserInput!): User!
  activateUser(
    userId: String!
    password: String!
    securityQNAs: [SecurityQuestionAnswer]!
  ): String
}

type Dummy {
  dummy: String!
}

type Notification {
  id: ID!
  child: Person
  mother: Person
  father: Person
  informant: Person
  location: Location
  createdAt: Date
  updatedAt: Date
}

scalar Date

type BirthRegistration implements EventRegistration {
  id: ID!
  _fhirIDMap: Map
  registration: Registration
  child: Person
  mother: Person
  father: Person
  informant: RelatedPerson
  eventLocation: Location
  birthType: BirthType
  weightAtBirth: Float
  attendantAtBirth: AttendantType
  otherAttendantAtBirth: String
  birthRegistrationType: BirthRegType
  presentAtBirthRegistration: BirthRegPresence
  otherPresentAtBirthRegistration: String
  childrenBornAliveToMother: Int
  foetalDeathsToMother: Int
  lastPreviousLiveBirth: Date
  createdAt: Date
  updatedAt: Date
}

type Person {
  id: ID
  _fhirID: ID
  identifier: [IdentityType]
  name: [HumanName]
  telecom: [ContactPoint]
  gender: String
  birthDate: String
  maritalStatus: MaritalStatusType
  dateOfMarriage: Date
  multipleBirth: Int
  address: [Address]
  photo: [Attachment]
  deceased: Deceased
  nationality: [String]
  educationalAttainment: EducationType
}

type BirthRegResultSet {
  results: [BirthRegistration]
  totalItems: Int
}

type DeathRegistration implements EventRegistration {
  id: ID!
  _fhirIDMap: Map
  registration: Registration
  deceased: Person
  informant: RelatedPerson
  eventLocation: Location
  mannerOfDeath: MannerOfDeath
  causeOfDeathMethod: CauseOfDeathMethodType
  causeOfDeath: String
  createdAt: Date
  updatedAt: Date
}

type DeathRegResultSet {
  results: [DeathRegistration]
  totalItems: Int
}

interface EventRegistration {
  id: ID!
  registration: Registration
  createdAt: Date
}

type EventRegResultSet {
  results: [EventRegistration]
  totalItems: Int
}

type RegistrationCount {
  declared: Int
  rejected: Int
}

type Location {
  id: ID!
  _fhirID: ID
  identifier: [Identifier]
  status: String
  name: String
  alias: [String]
  description: String
  partOf: String
  type: LocationType
  telecom: [ContactPoint]
  address: Address
  longitude: Float
  latitude: Float
  altitude: Float
  geoData: String
}

type User {
  id: ID
  userMgntUserID: ID
  practitionerId: String
  name: [HumanName]
  username: String
  mobile: String
  role: String
  type: String
  email: String
  status: String
  primaryOffice: Location
  catchmentArea: [Location]
}

type SearchUserResult {
  results: [User]
  totalItems: Int
}

type BirthRegistrationMetrics {
  keyFigures: [BirthKeyFigures]
  regByAge: [BirthRegistrationByAgeMetrics]
  regWithin45d: [BirthRegistrationWithIn45D]
}

type EventCount {
  declared: Int
  registered: Int
  rejected: Int
}

type EventSearchResultSet {
  results: [EventSearchSet]
  totalItems: Int
}

type Role {
  id: ID!
  title: String
  value: String
  types: [String]
  active: Boolean
}

input NotificationInput {
  child: PersonInput
  mother: PersonInput
  father: PersonInput
  informant: PersonInput
  location: LocationInput
  createdAt: Date
  updatedAt: Date
}

type CreatedIds {
  compositionId: String
  trackingId: String
  registrationNumber: String
}

input BirthRegistrationInput {
  _fhirIDMap: Map
  registration: RegistrationInput
  child: PersonInput
  mother: PersonInput
  father: PersonInput
  informant: RelatedPersonInput
  eventLocation: LocationInput
  birthType: BirthType
  weightAtBirth: Float
  attendantAtBirth: AttendantType
  otherAttendantAtBirth: String
  birthRegistrationType: BirthRegType
  presentAtBirthRegistration: BirthRegPresence
  otherPresentAtBirthRegistration: String
  childrenBornAliveToMother: Int
  foetalDeathsToMother: Int
  lastPreviousLiveBirth: Date
  createdAt: Date
  updatedAt: Date
}

input DeathRegistrationInput {
  _fhirIDMap: Map
  registration: RegistrationInput
  deceased: PersonInput
  informant: RelatedPersonInput
  eventLocation: LocationInput
  mannerOfDeath: MannerOfDeath
  causeOfDeathMethod: CauseOfDeathMethodType
  causeOfDeath: String
  createdAt: Date
  updatedAt: Date
}

input UserInput {
  name: [HumanNameInput]
  identifier: [UserIdentifierInput]
  username: String
  mobile: String
  role: String
  type: String
  email: String
  primaryOffice: String
  catchmentArea: [String]
  device: String
}

input SecurityQuestionAnswer {
  questionKey: String
  answer: String
}

scalar Map

type Registration {
  id: ID
  _fhirID: ID
  trackingId: String
  registrationNumber: String
  paperFormID: String
  page: String
  book: String
  contact: RegistrationContactType
  contactPhoneNumber: String
  status: [RegWorkflow]
  type: RegistrationType
  inProgress: Boolean
  attachments: [Attachment]
  certificates: [Certificate]
  duplicates: [ID]
}

type RelatedPerson {
  id: ID
  _fhirID: ID
  relationship: RelationshipType
  otherRelationship: String
  individual: Person
}

enum BirthType {
  SINGLE
  TWIN
  TRIPLET
  QUADRUPLET
  HIGHER_MULTIPLE_DELIVERY
}

enum AttendantType {
  PHYSICIAN
  NURSE
  NURSE_MIDWIFE
  MIDWIFE
  OTHER_PARAMEDICAL_PERSONNEL
  LAYPERSON
  NONE
  OTHER
}

enum BirthRegType {
  BOTH_PARENTS
  SELF
  INFORMANT_ONLY
  MOTHER_ONLY
  FATHER_ONLY
}

enum BirthRegPresence {
  BOTH_PARENTS
  INFORMANT
  MOTHER
  FATHER
  OTHER
}

type IdentityType {
  id: ID
  type: IdentityIDType
  otherType: String
}

type HumanName {
  use: String
  firstNames: String
  familyName: String
}

type ContactPoint {
  system: String
  value: String
  use: String
}

enum MaritalStatusType {
  SINGLE
  MARRIED
  WIDOWED
  DIVORCED
  NOT_STATED
}

type Address {
  use: String
  type: AddressType
  text: String
  line: [String]
  city: String
  district: String
  state: String
  postalCode: String
  country: String
  from: Date
  to: Date
}

type Attachment {
  id: ID!
  _fhirID: ID
  contentType: String
  data: String
  status: String
  originalFileName: String
  systemFileName: String
  type: AttachmentType
  description: String
  subject: AttachmentSubject
  createdAt: Date
}

type Deceased {
  deceased: Boolean
  deathDate: String
}

enum EducationType {
  NO_SCHOOLING
  PRIMARY_ISCED_1
  LOWER_SECONDARY_ISCED_2
  UPPER_SECONDARY_ISCED_3
  POST_SECONDARY_ISCED_4
  FIRST_STAGE_TERTIARY_ISCED_5
  SECOND_STAGE_TERTIARY_ISCED_6
  NOT_STATED
}

enum MannerOfDeath {
  NATURAL_CAUSES
  ACCIDENT
  SUICIDE
  HOMICIDE
  UNDETERMINED
}

enum CauseOfDeathMethodType {
  VERBAL_AUTOPSY
  MEDICALLY_CERTIFIED
}

type Identifier {
  system: String
  value: String
}

enum LocationType {
  HEALTH_FACILITY
  HOSPITAL
  OTHER_HEALTH_INSTITUTION
  ADMIN_STRUCTURE
  CRVS_OFFICE
  PRIVATE_HOME
  CURRENT
  PERMANENT
  MILITARY_BASE_OR_CANTONMENT
  IDP_CAMP
  UNHCR_CAMP
  OTHER
}

type BirthKeyFigures {
  label: String
  value: Int
  total: Int
  estimate: Int
  categoricalData: [BirthKeyFiguresData]
}

type BirthRegistrationByAgeMetrics {
  label: String
  value: Int
}

type BirthRegistrationWithIn45D {
  label: String
  value: Int
  totalEstimate: Int
}

interface EventSearchSet {
  id: ID!
  type: String
  registration: RegistrationSearchSet
}

input PersonInput {
  _fhirID: ID
  identifier: [IdentityInput]
  name: [HumanNameInput]
  telecom: [ContactPointInput]
  gender: String
  birthDate: String
  maritalStatus: MaritalStatusType
  dateOfMarriage: Date
  multipleBirth: Int
  address: [AddressInput]
  photo: [AttachmentInput]
  deceased: DeceasedInput
  nationality: [String]
  educationalAttainment: EducationType
}

input LocationInput {
  _fhirID: ID
  identifier: [ID]
  status: String
  name: String
  alias: [String]
  description: String
  partOf: String
  type: LocationType
  telecom: [ContactPointInput]
  address: AddressInput
  longitude: Float
  latitude: Float
  altitude: Float
  geoData: String
}

input RegistrationInput {
  _fhirID: ID
  trackingId: String
  registrationNumber: String
  paperFormID: String
  page: String
  book: String
  contact: RegistrationContactType
  contactPhoneNumber: String
  status: [RegWorkflowInput]
  type: RegistrationType
  inProgress: Boolean
  attachments: [AttachmentInput]
  certificates: [CertificateInput]
  location: LocationInput
}

input RelatedPersonInput {
  id: ID
  _fhirID: ID
  relationship: RelationshipType
  otherRelationship: String
  individual: PersonInput
}

input HumanNameInput {
  use: String
  firstNames: String
  familyName: String
}

input UserIdentifierInput {
  use: String
  system: String
  value: String
}

enum RegistrationContactType {
  BOTH
  MOTHER
  FATHER
}

type RegWorkflow {
  id: ID!
  type: RegStatus
  user: User
  timestamp: Date
  comments: [Comment]
  location: Location
  office: Location
}

enum RegistrationType {
  BIRTH
  DEATH
}

type Certificate {
  collector: RelatedPerson
  hasShowedVerifiedDocument: Boolean
  payments: [Payment]
  data: String
}

enum RelationshipType {
  FATHER
  MOTHER
  SPOUSE
  SON
  DAUGHTER
  EXTENDED_FAMILY
  OTHER
  INFORMANT
}

enum IdentityIDType {
  PASSPORT
  NATIONAL_ID
  DRIVING_LICENSE
  BIRTH_REGISTRATION_NUMBER
  DEATH_REGISTRATION_NUMBER
  REFUGEE_NUMBER
  ALIEN_NUMBER
  OTHER
  NO_ID
}

enum AddressType {
  HEALTH_FACILITY
  ADMIN_STRUCTURE
  CRVS_OFFICE
  PRIVATE_HOME
  CURRENT
  PERMANENT
  MILITARY_BASE_OR_CANTONMENT
  IDP_CAMP
  UNHCR_CAMP
  OTHER
}

enum AttachmentType {
  PASSPORT
  NATIONAL_ID_FRONT
  NATIONAL_ID_BACK
  IMMUNISATION_CERTIFICATE
  PAPER_FORM
  PASSPORT_PHOTO
  BIRTH_REGISTRATION
  SCHOOL_CERTIFICATE
  PROOF_OF_DEATH
  OTHER
  POST_MORTEM_CERTIFICATE
  HOSPITAL_DISCHARGE_CERTIFICATE
  ATTESTED_DEATH_LETTER
  ATTESTED_DEATH_CERTIFICATE
  BURIAL_RECEIPT
  FUNERAL_RECEIPT
  DOCTOR_CERTIFICATE
  EPI_CARD
  BIRTH_PLACE_DATE_PROOF
  EPI_STAFF_CERTIFICATE
  BIRTH_PLACE_DATE_PROOF
  DISCHARGE_CERTIFICATE
  MEDICAL_INSTITUTION
  BIRTH_ATTENDANT
  TAX_RECEIPT
}

enum AttachmentSubject {
  MOTHER
  FATHER
  CHILD
  OTHER
  PARENT
  CHILDAGE
  DECEASED_ID_PROOF
  DECEASED_PARMANENT_ADDRESS_PROOF
  DECEASED_DEATH_PROOF
  DECEASED_BIRTH_PROOF
  APPLICANT_ID_PROOF
}

type BirthKeyFiguresData {
  name: String
  value: Int
}

type RegistrationSearchSet {
  status: String
  contactNumber: String
  dateOfApplication: Date
  trackingId: String
  registrationNumber: String
  eventLocationId: String
  registeredLocationId: String
  reason: String
  comment: String
  duplicates: [ID]
  createdAt: String
  modifiedAt: String
}

type BirthEventSearchSet implements EventSearchSet {
  id: ID!
  type: String
  childName: [HumanName]
  dateOfBirth: Date
  registration: RegistrationSearchSet
}

type DeathEventSearchSet implements EventSearchSet {
  id: ID!
  type: String
  deceasedName: [HumanName]
  dateOfDeath: Date
  registration: RegistrationSearchSet
}

input IdentityInput {
  id: ID
  type: IdentityIDType
  otherType: String
}

input ContactPointInput {
  system: String
  value: String
  use: String
}

input AddressInput {
  use: String
  type: AddressType
  text: String
  line: [String]
  city: String
  district: String
  state: String
  postalCode: String
  country: String
  from: Date
  to: Date
}

input AttachmentInput {
  _fhirID: ID
  contentType: String
  data: String
  status: String
  originalFileName: String
  systemFileName: String
  type: AttachmentType
  description: String
  subject: AttachmentSubject
  createdAt: Date
}

input DeceasedInput {
  deceased: Boolean
  deathDate: String
}

input RegWorkflowInput {
  type: RegStatus
  user: UserInput
  timestamp: Date
  comments: [CommentInput]
  location: LocationInput
}

input CertificateInput {
  collector: RelatedPersonInput
  hasShowedVerifiedDocument: Boolean
  payments: [PaymentInput]
  data: String
}

enum RegStatus {
  IN_PROGRESS
  DECLARED
  REGISTERED
  CERTIFIED
  REJECTED
}

type Comment {
  id: ID!
  user: User
  comment: String
  createdAt: Date
}

type Payment {
  paymentId: ID
  type: PaymentType
  total: Float
  amount: Float
  outcome: PaymentOutcomeType
  date: Date
}

input CommentInput {
  user: UserInput
  comment: String
  createdAt: Date
}

input PaymentInput {
  paymentId: ID
  type: PaymentType
  total: Float
  amount: Float
  outcome: PaymentOutcomeType
  date: Date
}

enum PaymentType {
  MANUAL
}

enum PaymentOutcomeType {
  COMPLETED
  ERROR
  PARTIAL
}
