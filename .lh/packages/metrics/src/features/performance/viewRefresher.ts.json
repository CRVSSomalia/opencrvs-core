{
    "sourceFile": "packages/metrics/src/features/performance/viewRefresher.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1676977927365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1676978087653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,27 +17,27 @@\n let currentUpdate = false\n \n export async function refresh() {\n   if (currentUpdate) {\n-    logger.info('Analytics materialised views already being refreshed')\n+    logger.info('Performances materialised views already being refreshed')\n     return\n   }\n-  logger.info('Refreshing analytics materialised views')\n+  logger.info('Refreshing performances materialised views')\n   const client = new MongoClient(HEARTH_MONGO_URL)\n   try {\n     currentUpdate = true\n     await client.connect()\n-    await refreshAnalyticsMaterialisedViews(client)\n-    logger.info('Analytics materialised views refreshed')\n+    await refreshPerformanceMaterialisedViews(client)\n+    logger.info('Performances materialised views refreshed')\n   } catch (error) {\n-    logger.error(`Error refreshing analytics materialised views ${error}`)\n+    logger.error(`Error refreshing performances materialised views ${error}`)\n   } finally {\n     currentUpdate = false\n     await client.close()\n   }\n }\n \n-async function refreshAnalyticsMaterialisedViews(client: MongoClient) {\n+async function refreshPerformanceMaterialisedViews(client: MongoClient) {\n   const db = client.db(client.options.dbName)\n \n   const lastUpdatedAt = subMinutes(new Date(), 5).toISOString()\n   await db\n"
                },
                {
                    "date": 1676978130508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,18 +17,18 @@\n let currentUpdate = false\n \n export async function refresh() {\n   if (currentUpdate) {\n-    logger.info('Performances materialised views already being refreshed')\n+    logger.info('Performance materialised views already being refreshed')\n     return\n   }\n-  logger.info('Refreshing performances materialised views')\n+  logger.info('Refreshing performance materialised views')\n   const client = new MongoClient(HEARTH_MONGO_URL)\n   try {\n     currentUpdate = true\n     await client.connect()\n     await refreshPerformanceMaterialisedViews(client)\n-    logger.info('Performances materialised views refreshed')\n+    logger.info('Performance materialised views refreshed')\n   } catch (error) {\n     logger.error(`Error refreshing performances materialised views ${error}`)\n   } finally {\n     currentUpdate = false\n@@ -533,9 +533,9 @@\n           }\n         },\n         {\n           $merge: {\n-            into: { db: 'analytics', coll: 'registrations' },\n+            into: { db: 'performance', coll: 'registrations' },\n             on: '_id',\n             whenMatched: 'replace',\n             whenNotMatched: 'insert'\n           }\n@@ -700,9 +700,9 @@\n           }\n         },\n         {\n           $merge: {\n-            into: { db: 'analytics', coll: 'corrections' },\n+            into: { db: 'performance', coll: 'corrections' },\n             on: '_id',\n             whenMatched: 'replace',\n             whenNotMatched: 'insert'\n           }\n@@ -835,9 +835,9 @@\n           }\n         },\n         {\n           $merge: {\n-            into: { db: 'analytics', coll: 'populationEstimatesPerDay' },\n+            into: { db: 'performance', coll: 'populationEstimatesPerDay' },\n             on: '_id',\n             whenMatched: 'replace',\n             whenNotMatched: 'insert'\n           }\n"
                }
            ],
            "date": 1676977927365,
            "name": "Commit-0",
            "content": "/*\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n *\n * OpenCRVS is also distributed under the terms of the Civil Registration\n * & Healthcare Disclaimer located at http://opencrvs.org/license.\n *\n * Copyright (C) The OpenCRVS Authors. OpenCRVS and the OpenCRVS\n * graphic logo are (registered/a) trademark(s) of Plan International.\n */\nimport { HEARTH_MONGO_URL } from '@metrics/constants'\nimport { logger } from '@metrics/logger'\nimport { subMinutes } from 'date-fns'\nimport { MongoClient } from 'mongodb'\n\nlet currentUpdate = false\n\nexport async function refresh() {\n  if (currentUpdate) {\n    logger.info('Analytics materialised views already being refreshed')\n    return\n  }\n  logger.info('Refreshing analytics materialised views')\n  const client = new MongoClient(HEARTH_MONGO_URL)\n  try {\n    currentUpdate = true\n    await client.connect()\n    await refreshAnalyticsMaterialisedViews(client)\n    logger.info('Analytics materialised views refreshed')\n  } catch (error) {\n    logger.error(`Error refreshing analytics materialised views ${error}`)\n  } finally {\n    currentUpdate = false\n    await client.close()\n  }\n}\n\nasync function refreshAnalyticsMaterialisedViews(client: MongoClient) {\n  const db = client.db(client.options.dbName)\n\n  const lastUpdatedAt = subMinutes(new Date(), 5).toISOString()\n  await db\n    .collection('Task')\n    .aggregate(\n      [\n        {\n          $match: {\n            'meta.lastUpdated': { $gte: lastUpdatedAt }\n          }\n        },\n        { $unwind: '$businessStatus.coding' },\n        {\n          $match: {\n            'businessStatus.coding.code': { $in: ['CERTIFIED', 'REGISTERED'] }\n          }\n        },\n        {\n          $addFields: {\n            compositionId: {\n              $arrayElemAt: [{ $split: ['$focus.reference', '/'] }, 1]\n            }\n          }\n        },\n        {\n          $lookup: {\n            from: 'Composition',\n            localField: 'compositionId',\n            foreignField: 'id',\n            as: 'composition'\n          }\n        },\n        { $unwind: '$composition' },\n        { $addFields: { 'composition.latestTask': '$$ROOT' } },\n        { $replaceRoot: { newRoot: '$composition' } },\n        {\n          $addFields: {\n            extensions: {\n              $arrayToObject: {\n                $map: {\n                  input: '$section',\n                  as: 'el',\n                  in: [\n                    {\n                      $let: {\n                        vars: {\n                          firstElement: {\n                            $arrayElemAt: ['$$el.code.coding', 0]\n                          }\n                        },\n                        in: '$$firstElement.code'\n                      }\n                    },\n                    {\n                      $let: {\n                        vars: {\n                          firstElement: { $arrayElemAt: ['$$el.entry', 0] }\n                        },\n                        in: {\n                          $arrayElemAt: [\n                            { $split: ['$$firstElement.reference', '/'] },\n                            1\n                          ]\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        },\n        {\n          $lookup: {\n            from: 'Task',\n            localField: 'latestTask.focus.reference',\n            foreignField: 'focus.reference',\n            as: 'task'\n          }\n        },\n        {\n          $lookup: {\n            from: 'Task_history',\n            localField: 'latestTask.focus.reference',\n            foreignField: 'focus.reference',\n            as: 'task_history'\n          }\n        },\n        {\n          $addFields: {\n            allTasks: { $concatArrays: ['$task', '$task_history'] }\n          }\n        },\n        {\n          $addFields: {\n            registerTask: {\n              $arrayElemAt: [\n                {\n                  $filter: {\n                    input: '$allTasks',\n                    cond: {\n                      $eq: [\n                        'REGISTERED',\n                        {\n                          $let: {\n                            vars: {\n                              coding: {\n                                $arrayElemAt: [\n                                  '$$this.businessStatus.coding',\n                                  0\n                                ]\n                              }\n                            },\n                            in: '$$coding.code'\n                          }\n                        }\n                      ]\n                    }\n                  }\n                },\n                0\n              ]\n            },\n            firstTask: {\n              $arrayElemAt: [\n                {\n                  $filter: {\n                    input: '$allTasks',\n                    cond: {\n                      $eq: [\n                        {\n                          $min: '$allTasks.meta.lastUpdated'\n                        },\n                        '$$this.meta.lastUpdated'\n                      ]\n                    }\n                  }\n                },\n                0\n              ]\n            }\n          }\n        },\n        {\n          $addFields: {\n            'firstTask.extensionsObject': {\n              $arrayToObject: {\n                $map: {\n                  input: '$firstTask.extension',\n                  as: 'el',\n                  in: [\n                    {\n                      $replaceOne: {\n                        input: '$$el.url',\n                        find: 'http://opencrvs.org/specs/extension/',\n                        replacement: ''\n                      }\n                    },\n                    {\n                      $arrayElemAt: [\n                        { $split: ['$$el.valueReference.reference', '/'] },\n                        1\n                      ]\n                    }\n                  ]\n                }\n              }\n            },\n            'registerTask.extensionsObject': {\n              $arrayToObject: {\n                $map: {\n                  input: '$registerTask.extension',\n                  as: 'el',\n                  in: [\n                    {\n                      $replaceOne: {\n                        input: '$$el.url',\n                        find: 'http://opencrvs.org/specs/extension/',\n                        replacement: ''\n                      }\n                    },\n                    {\n                      $arrayElemAt: [\n                        { $split: ['$$el.valueReference.reference', '/'] },\n                        1\n                      ]\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        },\n        {\n          $lookup: {\n            from: 'Patient',\n            localField: 'extensions.mother-details',\n            foreignField: 'id',\n            as: 'mother'\n          }\n        },\n        {\n          $lookup: {\n            from: 'Patient',\n            localField: 'extensions.mother-details',\n            foreignField: 'id',\n            as: 'mother'\n          }\n        },\n        {\n          $lookup: {\n            from: 'Patient',\n            localField: 'extensions.father-details',\n            foreignField: 'id',\n            as: 'father'\n          }\n        },\n        {\n          $lookup: {\n            from: 'Encounter',\n            localField: 'extensions.birth-encounter',\n            foreignField: 'id',\n            as: 'encounter'\n          }\n        },\n        { $unwind: '$encounter' },\n        { $unwind: '$encounter.location' },\n        {\n          $addFields: {\n            placeOfBirthLocationId: {\n              $replaceOne: {\n                input: '$encounter.location.location.reference',\n                find: 'Location/',\n                replacement: ''\n              }\n            }\n          }\n        },\n        {\n          $addFields: {\n            encounterIdForJoining: { $concat: ['Encounter/', '$encounter.id'] }\n          }\n        },\n        {\n          $lookup: {\n            from: 'Observation',\n            localField: 'encounterIdForJoining',\n            foreignField: 'context.reference',\n            as: 'observations'\n          }\n        },\n        {\n          $addFields: {\n            birthTypeObservation: {\n              $filter: {\n                input: '$observations',\n                as: 'element',\n                cond: {\n                  $eq: [\n                    {\n                      $let: {\n                        vars: {\n                          firstElement: {\n                            $arrayElemAt: ['$$element.code.coding', 0]\n                          }\n                        },\n                        in: '$$firstElement.code'\n                      }\n                    },\n                    '57722-1'\n                  ]\n                }\n              }\n            }\n          }\n        },\n        { $unwind: '$birthTypeObservation' },\n        {\n          $lookup: {\n            from: 'Location',\n            localField: 'placeOfBirthLocationId',\n            foreignField: 'id',\n            as: 'placeOfBirthLocation'\n          }\n        },\n        {\n          $lookup: {\n            from: 'Patient',\n            localField: 'extensions.child-details',\n            foreignField: 'id',\n            as: 'child'\n          }\n        },\n        { $unwind: '$mother' },\n        { $unwind: '$father' },\n        { $unwind: '$child' },\n        { $unwind: '$placeOfBirthLocation' },\n        {\n          $addFields: {\n            childsAgeInDaysAtDeclaration: {\n              $divide: [\n                {\n                  $subtract: [\n                    { $toDate: '$date' },\n                    { $toDate: '$child.birthDate' }\n                  ]\n                },\n                1000 * 60 * 60 * 24\n              ]\n            },\n            mothersAgeAtBirthOfChild: {\n              $divide: [\n                {\n                  $subtract: [\n                    { $toDate: '$child.birthDate' },\n                    { $toDate: '$mother.birthDate' }\n                  ]\n                },\n                1000 * 60 * 60 * 24 * 365\n              ]\n            },\n            placeOfBirthType: {\n              $arrayElemAt: ['$placeOfBirthLocation.type.coding.code', 0]\n            },\n            'mother.extensionsObject': {\n              $arrayToObject: {\n                $map: {\n                  input: '$mother.extension',\n                  as: 'el',\n                  in: [\n                    {\n                      $replaceOne: {\n                        input: '$$el.url',\n                        find: 'http://opencrvs.org/specs/extension/',\n                        replacement: ''\n                      }\n                    },\n                    '$$el.valueString'\n                  ]\n                }\n              }\n            },\n            'father.extensionsObject': {\n              $arrayToObject: {\n                $map: {\n                  input: '$father.extension',\n                  as: 'el',\n                  in: [\n                    {\n                      $replaceOne: {\n                        input: '$$el.url',\n                        find: 'http://opencrvs.org/specs/extension/',\n                        replacement: ''\n                      }\n                    },\n                    '$$el.valueString'\n                  ]\n                }\n              }\n            }\n          }\n        },\n        {\n          $lookup: {\n            from: 'Practitioner',\n            localField: 'registerTask.extensionsObject.regLastUser',\n            foreignField: 'id',\n            as: 'practitioner'\n          }\n        },\n        { $unwind: '$practitioner' },\n        { $unwind: '$practitioner.name' },\n        {\n          $addFields: {\n            practitionerRoleForJoining: {\n              $concat: ['Practitioner/', '$practitioner.id']\n            },\n            practitionerFirstname: {\n              $reduce: {\n                input: '$practitioner.name.given',\n                initialValue: '',\n                in: { $concat: ['$$value', ' ', '$$this'] }\n              }\n            },\n            practitionerFamilyname: {\n              $cond: {\n                if: {\n                  $isArray: '$practitioner.name.family'\n                },\n                then: {\n                  $reduce: {\n                    input: '$practitioner.name.family',\n                    initialValue: '',\n                    in: { $concat: ['$$value', ' ', '$$this'] }\n                  }\n                },\n                else: '$practitioner.name.family'\n              }\n            }\n          }\n        },\n        {\n          $lookup: {\n            from: 'PractitionerRole',\n            localField: 'practitionerRoleForJoining',\n            foreignField: 'practitioner.reference',\n            as: 'practitionerRole'\n          }\n        },\n        { $unwind: '$practitionerRole' },\n        { $unwind: '$practitionerRole.code' },\n        { $unwind: '$practitionerRole.code.coding' },\n        {\n          $match: {\n            'practitionerRole.code.coding.system':\n              'http://opencrvs.org/specs/titles'\n          }\n        },\n        {\n          $lookup: {\n            from: 'Location',\n            localField: 'firstTask.extensionsObject.regLastOffice',\n            foreignField: 'id',\n            as: 'office'\n          }\n        },\n        { $unwind: '$office' },\n        {\n          $addFields: {\n            'office.lga': {\n              $arrayElemAt: [{ $split: ['$office.partOf.reference', '/'] }, 1]\n            }\n          }\n        },\n        {\n          $lookup: {\n            from: 'Location',\n            localField: 'office.lga',\n            foreignField: 'id',\n            as: 'lga'\n          }\n        },\n        { $unwind: '$lga' },\n        {\n          $addFields: {\n            'lga.state': {\n              $arrayElemAt: [{ $split: ['$lga.partOf.reference', '/'] }, 1]\n            }\n          }\n        },\n        {\n          $lookup: {\n            from: 'Location',\n            localField: 'lga.state',\n            foreignField: 'id',\n            as: 'state'\n          }\n        },\n        { $unwind: '$state' },\n        {\n          $project: {\n            _id: 1,\n            id: 1,\n            event: 'Birth',\n            mothersLiteracy: '$mother.extensionsObject.literacy',\n            fathersLiteracy: '$father.extensionsObject.literacy',\n            mothersEducationalAttainment:\n              '$mother.extensionsObject.educational-attainment',\n            fathersEducationalAttainment:\n              '$father.extensionsObject.educational-attainment',\n            gender: '$child.gender',\n            birthOrder: '$child.multipleBirthInteger',\n            createdBy: '$firstTask.extensionsObject.regLastUser',\n            officeName: '$office.name',\n            lgaName: '$lga.name',\n            stateName: '$state.name',\n            createdAt: {\n              $dateFromString: { dateString: '$firstTask.lastModified' }\n            },\n            status: '$latestTask.businessStatus.coding.code',\n            childsAgeInDaysAtDeclaration: 1,\n            birthType: '$birthTypeObservation.valueQuantity.value',\n            mothersAgeAtBirthOfChildInYears: '$mothersAgeAtBirthOfChild',\n            placeOfBirthType: 1,\n            practitionerRole: '$practitionerRole.code.coding.code',\n            practitionerName: {\n              $concat: [\n                '$practitionerFamilyname',\n                ', ',\n                '$practitionerFirstname'\n              ]\n            }\n          }\n        },\n        {\n          $merge: {\n            into: { db: 'analytics', coll: 'registrations' },\n            on: '_id',\n            whenMatched: 'replace',\n            whenNotMatched: 'insert'\n          }\n        }\n      ],\n      { allowDiskUse: true }\n    )\n    .toArray()\n\n  await db\n    .collection('Task')\n    .aggregate(\n      [\n        {\n          $unionWith: 'Task_history'\n        },\n        {\n          $match: {\n            'meta.lastUpdated': { $gte: lastUpdatedAt },\n            'extension.url':\n              'http://opencrvs.org/specs/extension/requestCorrection'\n          }\n        },\n        {\n          $addFields: {\n            compositionId: {\n              $arrayElemAt: [{ $split: ['$focus.reference', '/'] }, 1]\n            },\n            extensionsObject: {\n              $arrayToObject: {\n                $map: {\n                  input: '$extension',\n                  as: 'el',\n                  in: [\n                    {\n                      $replaceOne: {\n                        input: '$$el.url',\n                        find: 'http://opencrvs.org/specs/extension/',\n                        replacement: ''\n                      }\n                    },\n                    {\n                      $arrayElemAt: [\n                        { $split: ['$$el.valueReference.reference', '/'] },\n                        1\n                      ]\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        },\n        {\n          $lookup: {\n            from: 'Composition',\n            localField: 'compositionId',\n            foreignField: 'id',\n            as: 'composition'\n          }\n        },\n        { $unwind: '$composition' },\n        {\n          $addFields: {\n            extensions: {\n              $arrayToObject: {\n                $map: {\n                  input: '$composition.section',\n                  as: 'el',\n                  in: [\n                    {\n                      $let: {\n                        vars: {\n                          firstElement: {\n                            $arrayElemAt: ['$$el.code.coding', 0]\n                          }\n                        },\n                        in: '$$firstElement.code'\n                      }\n                    },\n                    {\n                      $let: {\n                        vars: {\n                          firstElement: { $arrayElemAt: ['$$el.entry', 0] }\n                        },\n                        in: {\n                          $arrayElemAt: [\n                            { $split: ['$$firstElement.reference', '/'] },\n                            1\n                          ]\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        },\n        {\n          $lookup: {\n            from: 'Patient',\n            localField: 'extensions.child-details',\n            foreignField: 'id',\n            as: 'child'\n          }\n        },\n        { $unwind: '$child' },\n        {\n          $lookup: {\n            from: 'Location',\n            localField: 'extensionsObject.regLastOffice',\n            foreignField: 'id',\n            as: 'office'\n          }\n        },\n        { $unwind: '$office' },\n        {\n          $addFields: {\n            'office.lga': {\n              $arrayElemAt: [{ $split: ['$office.partOf.reference', '/'] }, 1]\n            }\n          }\n        },\n        {\n          $lookup: {\n            from: 'Location',\n            localField: 'office.lga',\n            foreignField: 'id',\n            as: 'lga'\n          }\n        },\n        { $unwind: '$lga' },\n        {\n          $addFields: {\n            'lga.state': {\n              $arrayElemAt: [{ $split: ['$lga.partOf.reference', '/'] }, 1]\n            }\n          }\n        },\n        {\n          $lookup: {\n            from: 'Location',\n            localField: 'lga.state',\n            foreignField: 'id',\n            as: 'state'\n          }\n        },\n        { $unwind: '$state' },\n        {\n          $project: {\n            gender: '$child.gender',\n            reason: '$reason.text',\n            extensions: '$extensions',\n            officeName: '$office.name',\n            lgaName: '$lga.name',\n            stateName: '$state.name',\n            event: 'Birth',\n            createdAt: {\n              $dateFromString: { dateString: '$lastModified' }\n            }\n          }\n        },\n        {\n          $merge: {\n            into: { db: 'analytics', coll: 'corrections' },\n            on: '_id',\n            whenMatched: 'replace',\n            whenNotMatched: 'insert'\n          }\n        }\n      ],\n      { allowDiskUse: true }\n    )\n    .toArray()\n\n  await db\n    .collection('Location')\n    .aggregate(\n      [\n        { $match: { 'identifier.1.value': 'STATE' } },\n        {\n          $addFields: {\n            extensionsObject: {\n              $arrayToObject: {\n                $map: {\n                  input: '$extension',\n                  as: 'el',\n                  in: [\n                    {\n                      $replaceOne: {\n                        input: '$$el.url',\n                        find: 'http://opencrvs.org/specs/id/',\n                        replacement: ''\n                      }\n                    },\n                    {\n                      $function: {\n                        body: `function (jsonString) {\n                          return JSON.parse(jsonString)\n                        }`,\n                        args: ['$$el.valueString'],\n                        lang: 'js'\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        },\n        { $unwind: '$extensionsObject.statistics-crude-birth-rates' },\n        {\n          $project: {\n            name: 1,\n\n            populations: {\n              $reduce: {\n                input: {\n                  $map: {\n                    input: '$extensionsObject.statistics-total-populations',\n                    as: 'kv',\n                    in: {\n                      $map: {\n                        input: { $objectToArray: '$$kv' },\n                        as: 'kv2',\n                        in: {\n                          year: '$$kv2.k',\n                          value: '$$kv2.v'\n                        }\n                      }\n                    }\n                  }\n                },\n                initialValue: [],\n                in: { $concatArrays: ['$$value', '$$this'] }\n              }\n            },\n            cbr: {\n              $map: {\n                input: {\n                  $objectToArray:\n                    '$extensionsObject.statistics-crude-birth-rates'\n                },\n                as: 'kv',\n                in: {\n                  year: '$$kv.k',\n                  cbr: '$$kv.v'\n                }\n              }\n            }\n          }\n        },\n        { $unwind: '$cbr' },\n        {\n          $addFields: {\n            daysInYear: {\n              $function: {\n                body: `function (row) {\n                  function daysInYear(year) {\n                    return (year % 4 === 0 && year % 100 > 0) || year % 400 == 0\n                      ? 366\n                      : 365\n                  }\n                  const year = row.cbr.year\n                  const date = new Date(row.cbr.year, 1, 1)\n                  const population = row.populations.find(\n                    (p) => p.year === year\n                  )\n                  if (!population) {\n                    return []\n                  }\n                  const totalDays = daysInYear(year)\n                  return Array.from({ length: totalDays }, (value, index) => {\n                    date.setDate(date.getDate() + 1)\n                    return {\n                      date: date.toISOString(),\n                      estimatedNumberOfBirths:\n                        ((population.value / 1000) * row.cbr.cbr) / totalDays\n                    }\n                  })\n                }`,\n                args: ['$$ROOT'],\n                lang: 'js'\n              }\n            }\n          }\n        },\n        { $unwind: '$daysInYear' },\n        {\n          $project: {\n            _id: { $concat: [{ $toString: '$name' }, '$daysInYear.date'] },\n            name: 1,\n            date: { $dateFromString: { dateString: '$daysInYear.date' } },\n            estimatedNumberOfBirths: '$daysInYear.estimatedNumberOfBirths',\n            event: 'Birth'\n          }\n        },\n        {\n          $merge: {\n            into: { db: 'analytics', coll: 'populationEstimatesPerDay' },\n            on: '_id',\n            whenMatched: 'replace',\n            whenNotMatched: 'insert'\n          }\n        }\n      ],\n      { allowDiskUse: true }\n    )\n    .toArray()\n}\n"
        }
    ]
}