diff --git a/node_modules/react-scripts/scripts/utils/verifyTypeScriptSetup.js b/node_modules/react-scripts/scripts/utils/verifyTypeScriptSetup.js
index a73b8c0..587ad6c 100644
--- a/node_modules/react-scripts/scripts/utils/verifyTypeScriptSetup.js
+++ b/node_modules/react-scripts/scripts/utils/verifyTypeScriptSetup.js
@@ -6,29 +6,29 @@
  * LICENSE file in the root directory of this source tree.
  */
 
-'use strict';
+'use strict'
 
-const chalk = require('react-dev-utils/chalk');
-const fs = require('fs');
-const resolve = require('resolve');
-const path = require('path');
-const paths = require('../../config/paths');
-const os = require('os');
-const immer = require('react-dev-utils/immer').produce;
-const globby = require('react-dev-utils/globby').sync;
+const chalk = require('react-dev-utils/chalk')
+const fs = require('fs')
+const resolve = require('resolve')
+const path = require('path')
+const paths = require('../../config/paths')
+const os = require('os')
+const immer = require('react-dev-utils/immer').produce
+const globby = require('react-dev-utils/globby').sync
 
 function writeJson(fileName, object) {
   fs.writeFileSync(
     fileName,
     JSON.stringify(object, null, 2).replace(/\n/g, os.EOL) + os.EOL
-  );
+  )
 }
 
 function verifyNoTypeScript() {
   const typescriptFiles = globby(
     ['**/*.(ts|tsx)', '!**/node_modules', '!**/*.d.ts'],
     { cwd: paths.appSrc }
-  );
+  )
   if (typescriptFiles.length > 0) {
     console.warn(
       chalk.yellow(
@@ -36,32 +36,32 @@ function verifyNoTypeScript() {
           `src${path.sep}${typescriptFiles[0]}`
         )}) and created a ${chalk.bold('tsconfig.json')} file for you.`
       )
-    );
-    console.warn();
-    return false;
+    )
+    console.warn()
+    return false
   }
-  return true;
+  return true
 }
 
 function verifyTypeScriptSetup() {
-  let firstTimeSetup = false;
+  let firstTimeSetup = false
 
   if (!fs.existsSync(paths.appTsConfig)) {
     if (verifyNoTypeScript()) {
-      return;
+      return
     }
-    writeJson(paths.appTsConfig, {});
-    firstTimeSetup = true;
+    writeJson(paths.appTsConfig, {})
+    firstTimeSetup = true
   }
 
-  const isYarn = fs.existsSync(paths.yarnLockFile);
+  const isYarn = fs.existsSync(paths.yarnLockFile)
 
   // Ensure typescript is installed
-  let ts;
+  let ts
   try {
     ts = require(resolve.sync('typescript', {
-      basedir: paths.appNodeModules,
-    }));
+      basedir: paths.appNodeModules
+    }))
   } catch (_) {
     console.error(
       chalk.bold.red(
@@ -69,7 +69,7 @@ function verifyTypeScriptSetup() {
           'typescript'
         )} installed.`
       )
-    );
+    )
     console.error(
       chalk.bold(
         'Please install',
@@ -79,16 +79,16 @@ function verifyTypeScriptSetup() {
           isYarn ? 'yarn add typescript' : 'npm install typescript'
         ) + '.'
       )
-    );
+    )
     console.error(
       chalk.bold(
         'If you are not trying to use TypeScript, please remove the ' +
           chalk.cyan('tsconfig.json') +
           ' file from your package root (and any TypeScript files).'
       )
-    );
-    console.error();
-    process.exit(1);
+    )
+    console.error()
+    process.exit(1)
   }
 
   const compilerOptions = {
@@ -97,7 +97,7 @@ function verifyTypeScriptSetup() {
     // 'parsedValue' matches the output value from ts.parseJsonConfigFileContent()
     target: {
       parsedValue: ts.ScriptTarget.ES5,
-      suggested: 'es5',
+      suggested: 'es5'
     },
     lib: { suggested: ['dom', 'dom.iterable', 'esnext'] },
     allowJs: { suggested: true },
@@ -114,12 +114,12 @@ function verifyTypeScriptSetup() {
     module: {
       parsedValue: ts.ModuleKind.ESNext,
       value: 'esnext',
-      reason: 'for import() and import/export',
+      reason: 'for import() and import/export'
     },
     moduleResolution: {
       parsedValue: ts.ModuleResolutionKind.NodeJs,
       value: 'node',
-      reason: 'to match webpack resolution',
+      reason: 'to match webpack resolution'
     },
     resolveJsonModule: { value: true, reason: 'to match webpack loader' },
     isolatedModules: { value: true, reason: 'implementation limitation' },
@@ -127,52 +127,52 @@ function verifyTypeScriptSetup() {
     jsx: {
       parsedValue: ts.JsxEmit.Preserve,
       value: 'preserve',
-      reason: 'JSX is compiled by Babel',
-    },
-    paths: { value: undefined, reason: 'aliased imports are not supported' },
-  };
+      reason: 'JSX is compiled by Babel'
+    }
+    //  paths: { value: undefined, reason: 'aliased imports are not supported' },
+  }
 
   const formatDiagnosticHost = {
     getCanonicalFileName: fileName => fileName,
     getCurrentDirectory: ts.sys.getCurrentDirectory,
-    getNewLine: () => os.EOL,
-  };
+    getNewLine: () => os.EOL
+  }
 
-  const messages = [];
-  let appTsConfig;
-  let parsedTsConfig;
-  let parsedCompilerOptions;
+  const messages = []
+  let appTsConfig
+  let parsedTsConfig
+  let parsedCompilerOptions
   try {
     const { config: readTsConfig, error } = ts.readConfigFile(
       paths.appTsConfig,
       ts.sys.readFile
-    );
+    )
 
     if (error) {
-      throw new Error(ts.formatDiagnostic(error, formatDiagnosticHost));
+      throw new Error(ts.formatDiagnostic(error, formatDiagnosticHost))
     }
 
-    appTsConfig = readTsConfig;
+    appTsConfig = readTsConfig
 
     // Get TS to parse and resolve any "extends"
     // Calling this function also mutates the tsconfig above,
     // adding in "include" and "exclude", but the compilerOptions remain untouched
-    let result;
+    let result
     parsedTsConfig = immer(readTsConfig, config => {
       result = ts.parseJsonConfigFileContent(
         config,
         ts.sys,
         path.dirname(paths.appTsConfig)
-      );
-    });
+      )
+    })
 
     if (result.errors && result.errors.length) {
       throw new Error(
         ts.formatDiagnostic(result.errors[0], formatDiagnosticHost)
-      );
+      )
     }
 
-    parsedCompilerOptions = result.options;
+    parsedCompilerOptions = result.options
   } catch (e) {
     if (e && e.name === 'SyntaxError') {
       console.error(
@@ -181,50 +181,50 @@ function verifyTypeScriptSetup() {
           chalk.cyan('tsconfig.json') + '.',
           'Please make sure it contains syntactically correct JSON.'
         )
-      );
+      )
     }
 
-    console.log(e && e.message ? `${e.message}` : '');
-    process.exit(1);
+    console.log(e && e.message ? `${e.message}` : '')
+    process.exit(1)
   }
 
   if (appTsConfig.compilerOptions == null) {
-    appTsConfig.compilerOptions = {};
-    firstTimeSetup = true;
+    appTsConfig.compilerOptions = {}
+    firstTimeSetup = true
   }
 
   for (const option of Object.keys(compilerOptions)) {
-    const { parsedValue, value, suggested, reason } = compilerOptions[option];
+    const { parsedValue, value, suggested, reason } = compilerOptions[option]
 
-    const valueToCheck = parsedValue === undefined ? value : parsedValue;
-    const coloredOption = chalk.cyan('compilerOptions.' + option);
+    const valueToCheck = parsedValue === undefined ? value : parsedValue
+    const coloredOption = chalk.cyan('compilerOptions.' + option)
 
     if (suggested != null) {
       if (parsedCompilerOptions[option] === undefined) {
-        appTsConfig.compilerOptions[option] = suggested;
+        appTsConfig.compilerOptions[option] = suggested
         messages.push(
           `${coloredOption} to be ${chalk.bold(
             'suggested'
           )} value: ${chalk.cyan.bold(suggested)} (this can be changed)`
-        );
+        )
       }
     } else if (parsedCompilerOptions[option] !== valueToCheck) {
-      appTsConfig.compilerOptions[option] = value;
+      appTsConfig.compilerOptions[option] = value
       messages.push(
         `${coloredOption} ${chalk.bold(
           valueToCheck == null ? 'must not' : 'must'
         )} be ${valueToCheck == null ? 'set' : chalk.cyan.bold(value)}` +
           (reason != null ? ` (${reason})` : '')
-      );
+      )
     }
   }
 
   // tsconfig will have the merged "include" and "exclude" by this point
   if (parsedTsConfig.include == null) {
-    appTsConfig.include = ['src'];
+    appTsConfig.include = ['src']
     messages.push(
       `${chalk.cyan('include')} should be ${chalk.cyan.bold('src')}`
-    );
+    )
   }
 
   if (messages.length > 0) {
@@ -235,8 +235,8 @@ function verifyTypeScriptSetup() {
           chalk.cyan('tsconfig.json'),
           'has been populated with default values.'
         )
-      );
-      console.log();
+      )
+      console.log()
     } else {
       console.warn(
         chalk.bold(
@@ -244,13 +244,13 @@ function verifyTypeScriptSetup() {
           chalk.cyan('tsconfig.json'),
           'file:'
         )
-      );
+      )
       messages.forEach(message => {
-        console.warn('  - ' + message);
-      });
-      console.warn();
+        console.warn('  - ' + message)
+      })
+      console.warn()
     }
-    writeJson(paths.appTsConfig, appTsConfig);
+    writeJson(paths.appTsConfig, appTsConfig)
   }
 
   // Reference `react-scripts` types
@@ -258,8 +258,8 @@ function verifyTypeScriptSetup() {
     fs.writeFileSync(
       paths.appTypeDeclarations,
       `/// <reference types="react-scripts" />${os.EOL}`
-    );
+    )
   }
 }
 
-module.exports = verifyTypeScriptSetup;
+module.exports = verifyTypeScriptSetup
